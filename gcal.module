<?php
// $Id$

/**
 * GCal
 *
 * An implementation of the Google Calendar API for Drupal.
 *
 * This module implements the API described here: http://code.google.com/apis/calendar/data/2.0/developers_guide.html
 *
 * The module is intended to be used by other modules who want to import/export to Google calendars.
 *
 * Currently, the module expects that at least one account has been created on admin/settings/gcal.
 * When the other authentication methods have been implemented, you may choose to use a more secure
 * method.
 *
 * The Google account username and password are stored IN PLAIN TEXT on your database, so do not use this
 * module in a shared server environment.
 *
 * Once an account has been created, you may access it through the Google username.
 *
 * For the examples, it's assumed you've create an account on admin/settings/gcal with the email address
 * "drupal@gmail.com".
 *
 * If you have only defined one account, it will be the default account, and you can omit the parameter in
 * API calls.
 *
 * Example:
 *
 * Create a calendar:
 * @code
 *  $calendar = array(
 *    'title' => 'My Calendar'
 *    'description' => 'Some text'
 *    'locale'  => 'en_US',
 *    'public'  => TRUE
 *  );
 * @endcode
 * See documentation for more parameters.
 *
 * @code
 *  $gcal_id = gcal_create_calendar($calendar); // using default account
 * @endcode
 *
 * Store $gcal_id for further reference.
 *
 * Get events
 * @code
 *   $events = gcal_find_events($start_min, $start_max, 'drupal@gmail.com');
 * @endcode
 * $events contains an array of events.
 *
 * @code
 *  $events[0]['title'] = "New title";
 *  $success = gcal_update_event($events[0]);
 * @endcode
 *
 */

// Drupal framework stuff

/**
 * Implementation of hook_menu()
 */
function gcal_menu() {
  return array(
    'admin/settings/gcal' => array(
      'title' => 'GCal Settings',
      'description' => 'Adjust GCal settings.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('gcal_settings'),
      'access arguments' => array('administer gcal configuration')
    ),
    'test-gcal' => array(
      'title' => 'GCal Test',
      'description' => 'Test GCal',
      'page callback' => 'gcal_test',
      'access callback' => TRUE
    )
  );
}

/*function gcal_test() {
  $calendar = array(
    'title'       => "Test",
    'description' => "Test calendar",
    'where'       => 'Florence, Italy',
    'timezone'    => 'Europe/Rome',
    'ctz'         => 'Europe/Rome',
    'public'      => TRUE
  );

  $cid = gcal_create_calendar($calendar);
  return $cid;
}


function gcal_test_update() {
  $data = _gcal_prepare_query(array(
    'Email'   => 'tasteflorence@gmail.com',
    'Passwd'  => 'aaron2010',
    'source'  => 'ed-drupal-1',
    'service' => 'cl'
  ));

  $content =
    "POST /accounts/ClientLogin HTTP/1.1\r\n" .
    "Host: www.google.com\r\n" .
    "GData-Version: 2\r\n" .
    "Content-Length: " . strlen($data) . "\r\n" .
    "Content-Type: application/x-www-form-urlencoded\r\n" .
    "Connection: close\r\n\r\n" .
    "$data\r\n";

  $result = _gcal_send_message($content);

  $a = split("\n", $result['content']);
  $token = str_replace("Auth=", '', $a[4]);

  $data = _gcal_prepare_query(array(
    'Email'   => 'tasteflorence@gmail.com',
    'Passwd'  => 'aaron2010',
    'source'  => 'ed-drupal-1',
    'service' => 'cl'
  ));

  $data = "";
  $content =
    "GET /calendar/feeds/p73608b8jvmkg3ce12p6ctkbo4@group.calendar.google.com/private/full?start-min=2010-04-15T15:00:00.000&start-max=2010-04-18T15:00:00.000 HTTP/1.1\r\n" .
    "Host: www.google.com\r\n" .
    "GData-Version: 2\r\n" .
    "Authorization: GoogleLogin auth=$token\r\n" .
    "Content-Length: " . strlen($data) . "\r\n" .
    "Content-Type: application/x-www-form-urlencoded\r\n" .
    "Connection: close\r\n\r\n" .
    "$data\r\n";

  $result = _gcal_send_message($content);

  $uri = str_replace("https://www.google.com", "", $result['headers']['Location']);
  $content =
    "GET $uri HTTP/1.1\r\n" .
    "Host: www.google.com\r\n" .
    "GData-Version: 2\r\n" .
    "Authorization: GoogleLogin auth=$token\r\n" .
    "Content-Length: " . strlen($data) . "\r\n" .
    "Content-Type: application/atom+xml\r\n" .
    "Connection: close\r\n\r\n" .
    "$data\r\n";


  $result = _gcal_send_message($content);

  $data = "<?xml version='1.0' encoding='UTF-8'?><entry xmlns='http://www.w3.org/2005/Atom' xmlns:openSearch='http://a9.com/-/spec/opensearchrss/1.0/' xmlns:gCal='http://schemas.google.com/gCal/2005' xmlns:gd='http://schemas.google.com/g/2005'><id>http://www.google.com/calendar/feeds/p73608b8jvmkg3ce12p6ctkbo4%40group.calendar.google.com/private/full/t3em9lm80s3msofomiprl68718</id><published>2010-04-14T19:15:23.000</published><updated>2010-04-14T19:15:23.000</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/g/2005#event'/><title type='text'>Test Event xxx</title><content type='text'>Test descriptionxxxxxxxx</content><link rel='alternate' type='text/html' href='http://www.google.com/calendar/event?eid=dDNlbTlsbTgwczNtc29mb21pcHJsNjg3MTggcDczNjA4Yjhqdm1rZzNjZTEycDZjdGtibzRAZw' title='alternate'/><link rel='self' type='application/atom+xml' href='https://www.google.com/calendar/feeds/p73608b8jvmkg3ce12p6ctkbo4%40group.calendar.google.com/private/full/t3em9lm80s3msofomiprl68718'/><link rel='edit' type='application/atom+xml' href='https://www.google.com/calendar/feeds/p73608b8jvmkg3ce12p6ctkbo4%40group.calendar.google.com/private/full/t3em9lm80s3msofomiprl68718/63406955723'/><author><name>tasteflorence@gmail.com</name><email>tasteflorence@gmail.com</email></author><gd:comments><gd:feedLink href='http://www.google.com/calendar/feeds/p73608b8jvmkg3ce12p6ctkbo4%40group.calendar.google.com/private/full/t3em9lm80s3msofomiprl68718/comments'/></gd:comments><gd:eventStatus value='http://schemas.google.com/g/2005#event.confirmed'/><gd:where valueString=''/><gd:who email='p73608b8jvmkg3ce12p6ctkbo4@group.calendar.google.com' rel='http://schemas.google.com/g/2005#event.organizer' valueString='Taste Florence Tour Management'/><gd:when endTime='2010-04-17T17:00:00.000+02:00' startTime='2010-04-17T17:00:00.000+02:00'/><gd:transparency value='http://schemas.google.com/g/2005#event.opaque'/><gd:visibility value='http://schemas.google.com/g/2005#event.default'/><gCal:anyoneCanAddSelf value='false'/><gCal:guestsCanInviteOthers value='true'/><gCal:guestsCanModify value='false'/><gCal:guestsCanSeeGuests value='true'/><gCal:sequence value='0'/><gCal:uid value='t3em9lm80s3msofomiprl68718@google.com'/></entry>";

  $content =
    "PUT /calendar/feeds/p73608b8jvmkg3ce12p6ctkbo4%40group.calendar.google.com/private/full/t3em9lm80s3msofomiprl68718/63406955723 HTTP/1.1\r\n" .
    "Host: www.google.com\r\n" .
    "GData-Version: 2\r\n" .
    "Authorization: GoogleLogin auth=$token\r\n" .
    "Content-Length: " . strlen($data) . "\r\n" .
    "Content-Type: application/atom+xml\r\n" .
    "If-Match: *\r\n" .
    "Connection: close\r\n\r\n" .
    "$data\r\n";


  $result = _gcal_send_message($content);

  $uri = str_replace("https://www.google.com", "", $result['headers']['Location']);
  $content =
    "PUT $uri HTTP/1.1\r\n" .
    "Host: www.google.com\r\n" .
    "GData-Version: 2\r\n" .
    "Authorization: GoogleLogin auth=$token\r\n" .
    "Content-Length: " . strlen($data) . "\r\n" .
    "Content-Type: application/atom+xml\r\n" .
    "If-Match: *\r\n" .
    "Connection: close\r\n\r\n" .
    "$data\r\n";

  $result = _gcal_send_message($content);
  drupal_set_message("<pre>" . print_r($result, TRUE) . "</pre>");
  drupal_set_message("<textarea cols='100' rows='50'>" . $result['content'] . "</textarea>");
  return "ok";

}*/

/**
 * Settings for the module
 */
function gcal_settings($form) {
  $form = array(
    'auth_info' => array(
      '#value'  => "<h3>Very Important Security Information - DO NOT IGNORE!</h3><p class='warning'>If you are on a shared host, do not fill in your user name and password, unless you are sure that no-one can access your database.  The credentials entered into this form will be stored in plain text in your system table on the database.</p><p style='color: red; font-weight: bold'>Anyone with access to your database will be able to read the Google account information you enter into this form!</p><p>If you are unsure, leave these fields blank, and GCal will use AuthSub proxy authentication when it is necessary to authenticate to Google.  This will require that you log in to Google when necessary, but will avoid storing your credentials in plain text.</p><p>Only enter your credentials here if you have absolute certainty that your database is secure.</p>"
    )
  );

  $accounts = gcal_accounts();
  $accounts[] = array(
    'aid'   => 'new',
    'email' => ''
  );

  foreach ($accounts as $account) {
    $id = $account['aid'];
    $form['account-' . $id] = array(
      '#type'         => 'fieldset',
      '#title'        => $account['email'],
      '#collapsible'  => TRUE,
      "email-$id"   => array(
        '#type'           => 'textfield',
        '#title'          => t("Google Account Email"),
        '#default_value'  => $account['email']
      ),
      "pass-$id"   => array(
        '#title'    => t("Google Password"),
        '#type'     => 'password_confirm'
      ),
      "delete-$id"   => array(
        '#title'        => t("Delete"),
        '#type'         => 'checkbox',
        '#description'  => t("Check here to delete this account when the form is saved.")
      )
    );
  }

  $form['submit'] = array(
    '#value'  => t("Save settings"),
    '#type'   => 'submit',
    '#submit' => array('gcal_settings_submit'),
  );

  return $form;
}

function gcal_settings_submit($form, &$form_state) {
  $accounts = gcal_accounts();
  $accounts['new'] = array(
    'aid'   => 'new',
    'email' => ''
  );

  foreach ($accounts as $aid => $account) {
    if ($form_state['values']["delete-$aid"] == 1) {
      gcal_delete_account($aid);
      continue;
    }

    $account['email'] = $form_state['values']["email-$aid"];

    if ($form_state['values']["pass-$aid"])
      $account['pass'] = $form_state['values']["pass-$aid"];

    if ($account['email'])
      gcal_save_account($account);
  }

  drupal_set_message(t("GCal settings have been saved."));
}

/**
 * Get all known accounts.
 *
 * @return
 * An array in the form of array($aid => array('aid' => $aid, 'email'  => $email, 'pass' => $pass)
 */
function gcal_accounts() {
  $accounts = array();

  $result = db_query("SELECT * FROM gcal_accounts");
  $row = NULL;
  while ($row = db_fetch_array($result)) {
    _gcal_account_calendars($row);
    $accounts[$row['aid']] = $row;
  }

  return $accounts;
}

/**
 * Get a single account from an email address.
 *
 * @param $email
 */
function gcal_account($email = 'default') {
  $sql = "SELECT * FROM gcal_accounts";
  if ($email != 'default')
    $sql .= " WHERE email = '%s'";
  $sql .= " LIMIT 1;";

  $result = ($email == 'default')? db_query($sql) : db_query($sql, $email);
  $account = db_fetch_array($result);
  _gcal_account_calendars($account);
  return $account;
}

/**
 * Add calendars to this account from Google.
 *
 * @param &$account
 */
function _gcal_account_calendars(&$account) {
  $account = _gcal_account($account);
  if (!$account) {
    drupal_set_message(t("Unknown account '!account'", array("!account" => $account)), 'error');
    return NULL;
  }

  $result = _gcal_action('GET', 'calendar/feeds/default/owncalendars/full', '', $account);
  $xml = simplexml_load_string(str_replace("\n", "", $result['content']));

  $account['calendars'] = array();
  foreach ($xml->entry as $entry) {
    $account['calendars'][] = _gcal_entry_to_calendar($entry);
  }
}

/**
 * Transform the $account parameter into an actual account array
 *
 * @param $account
 *
 * @return
 * An account array
 */
function _gcal_account($account = 'default') {
  if (is_array($account)) {
    return $account;
  }

  if ($account == 'default') {
    return _gcal_default_account();
  }

  return gcal_account($account);
}

/**
 * Retrieve the default account.  Currently retrieves the first account given by MySQL
 *
 * @return
 * An account array
 */
function _gcal_default_account() {
  return gcal_account();
}

/**
 * Delete an account.
 *
 * @param $aid
 */
function gcal_delete_account($aid) {
  db_query("DELETE FROM gcal_accounts WHERE aid = %d", $aid);
}

/**
 * Save an account.
 *
 * @param $account
 * An array of account info
 */
function gcal_save_account(&$account) {
  $update = "UPDATE gcal_accounts SET email = '%s', pass = '%s' WHERE aid = %d";
  $insert = "INSERT INTO gcal_accounts (email, pass) VALUES('%s', '%s')";

  if (! (int)$account['aid']) {
    db_query($insert, $account['email'], $account['pass']);
    $account['aid'] = db_last_insert_id('gcal_accounts', 'aid');
  } else {
    db_query($update, $account['email'], $account['pass'], $account['aid']);
  }
}

/**
 * Begin API wrapper
 */

/**
 * You must use this function in order to authenticate with Google before any operation.
 *
 * Your module will probably never need to call this, as it automatically gets called for you as necessary.
 *
 * The type of authentication will be determined by whether you've provided credentials or not.
 *
 * @see gcal_account()
 *
 * @param $account
 * The account to authenticate for.  This may either be an array (as retrieved from gcal_account()) or an email address.
 * If no account is given, the system will choose one at random.
 *
 * @return
 * An authentication token, or NULL on error.
 */
function gcal_authenticate($account = 'default') {
  static $tokens = array();

  $account = _gcal_account($account);
  if (!$account) {
    drupal_set_message(t("Unknown account '!account'", array("!account" => $account)), 'error');
    return NULL;
  }

  if (isset($tokens[$account['email']]))
    return $tokens[$account['email']];

  $token = _gcal_login($account);
  if ($token) {
    $tokens[$account['email']] = $token;
    return $token;
  } else {
    _gcal_authsub();
  }
}

/**
 * Implements client login
 *
 * http://code.google.com/apis/calendar/data/2.0/developers_guide_protocol.html#AuthClientLogin
 */
function _gcal_login($account) {
  $data = array(
    'Email'   => $account['email'],
    'Passwd'  => $account['pass'],
    'source'  => 'drupal-gcal-1',
    'service' => 'cl' // as per Google documentation
  );

  $result = _gcal_action('POST', "accounts/ClientLogin", $data, $account, FALSE);
  if ($result['status'] != '200') {
    drupal_set_message(t("There was an error authenticating with Google: !status: !message", array(
      '!message'  => $result['content'],
      '!status'   => $result['status']
    )), 'error');
    return NULL;
  }

  $fields = split("\n", $result['content']);
  foreach ($fields as $field) {
    $a = split("=", $field);
    if ($a[0] == 'Auth')
      return $a[1];
  }

  drupal_set_message(t("Bad response from Google server during authentication."), 'error');
  return NULL;
}

/**
 * Implements AuthSub authentication
 *
 * http://code.google.com/apis/calendar/data/2.0/developers_guide_protocol.html#AuthAuthSub
 */
function _gcal_authsub() {
  drupal_set_message("NOT IMPLEMENTED");
}

/**
 * Create a calendar.
 *
 * @param $account
 * The account to associate this calendar with.
 *
 * @param $calendar
 * An array of calendar values
 *  - title
 *  - description
 *  - country - two letter abbreviation, ie. US, IT
 *  - locale - ISO 639-1, ie en_US, en_GB
 *  - timezone - the time zone the calendar should display dates in.  This should be the same as ctz, below
 *  - ctz - the time zone you're in
 *  - hidden (TRUE|FALSE)
 *  - color (#rrggbb)
 *  - where
 *  - public (TRUE|FALSE)
 *
 * @return
 * TRUE on success
 */
function gcal_create_calendar($calendar, $account = 'default') {
  $account = _gcal_account($account);
  if (!$account) {
    drupal_set_message(t("Unknown account '!account'", array("!account" => $account)), 'error');
    return NULL;
  }

  $hidden = ($calendar['hidden'])? 'true' : 'false';

  $xml = "
    <entry xmlns='http://www.w3.org/2005/Atom'
       xmlns:gd='http://schemas.google.com/g/2005'
       xmlns:gCal='http://schemas.google.com/gCal/2005'>
      <title type='text'>" . check_plain($calendar['title']) . "</title>
      <summary type='text'>" . check_plain($calendar['description']) . "</summary>
      <gCal:hidden value='$hidden'></gCal:hidden>
  ";

  foreach (array('country', 'locale') as $settings_prop) {
    if (isset($calendar[$settings_prop])) {
      $val = check_plain($calendar[$settings_prop]);
      $xml .= "<gCal:settingsProperty name='$settings_prop' value='$val'></gCal:settingsProperty>";
    }
  }

  if (isset($calendar['timezone']))
    $xml .= "<gCal:timezone value='" . check_plain($calendar['timezone']) . "'></gCal:timezone>";
  if (isset($calendar['color']))
    $xml .= "<gCal:color value='" . check_plain($calendar['color']) . "'></gCal:color>";
  if (isset($calendar['where']))
    $xml .= "<gd:where rel='' label='' valueString='" . check_plain($calendar['where']) . "'></gd:where>";

  $xml .= "</entry>";

  $result = _gcal_action('POST', 'calendar/feeds/default/owncalendars/full', $xml, $account);
  if ($result['status'] != '201') {
    drupal_set_message(t("There was an error creating a new calendar.  Google said: !status: !message", array(
      '!message'  => $result['content'],
      '!status'   => $result['status']
    )), 'error');
    return FALSE;
  }

  $gcal = simplexml_load_string(str_replace("\n", "", $result['content']));
  $cal_id = urldecode(basename((string) $gcal->id));
  gcal_save_account($account);
  _gcal_account_calendars($account);

  if ($calendar['public'])
    gcal_make_calendar_public($cal_id, $account);

  return $cal_id;
}

/**
 * Make a calendar public.  This will fail if the calendar is already public!
 *
 * @param $calendar
 * The Google calendar id
 *
 * @param $account
 * An email address or an account.  Defaults to the default account.
 *
 * @return
 * TRUE on success.
 */
function gcal_make_calendar_public($calendar, $account = 'default') {
  $account = _gcal_account($account);
  if (!$account) {
    drupal_set_message(t("Unknown account '!account'", array("!account" => $account)), 'error');
    return FALSE;
  }

  $xml = "
    <entry xmlns='http://www.w3.org/2005/Atom' xmlns:gAcl='http://schemas.google.com/acl/2007'>
      <category scheme='http://schemas.google.com/g/2005#kind'
        term='http://schemas.google.com/acl/2007#accessRule'/>
      <gAcl:scope type='default'></gAcl:scope>
      <gAcl:role value='http://schemas.google.com/gCal/2005#read'></gAcl:role>
    </entry>
  ";

  $result = _gcal_action('POST', "calendar/feeds/$calendar/acl/full", $xml, $account);
  // Google API says this should be 200, but it's working and sending back 201
  if ($result['status'] != '201') {
    drupal_set_message(t("There was an error setting this calendar to public.  Google said: !status: !message", array(
      '!message'  => $result['content'],
      '!status'   => $result['status']
    )), 'error');
    return FALSE;
  }

  return TRUE;
}

/**
 * Get the indicated calendar from the indicated account.
 *
 * @param $calendar_id
 *
 * @param $account
 *
 * @return
 * A calendar data structure.
 */
function _gcal_get_calendar($calendar_id, $account) {
  $account = _gcal_account($account);
  if (!$account) {
    drupal_set_message(t("Unknown account '!account'", array("!account" => $account)), 'error');
    return NULL;
  }

  foreach($account['calendars'] as $calendar) {
    if (strpos((string) $calendar['_entry']->id, $calendar_id))
      return $calendar;
  }

  return NULL;
}

/**
 * Create an event.
 *
 * @param $event
 * Event data in an array containing:
 *  - recurrence information (see Google API)
 *  - start - when the event begins in the format YYYYMMDDTHHMMss.mmmtz
 *  - end - when the event ends in the format YYYYMMDDTHHMMss.mmmtz
 *  - properties - an array of name value pairs that will be set as extendedProperties -- see Google API
 *  - title
 *  - description
 *
 * @todo Implement the other properties
 *
 * @param $account
 * The account that owns this calendar.  Either an email address or an account retrieved from gcal_account
 *
 * @param $calendar
 * The calendar to add this event to.
 *
 * @param $max_retry
 * The number of times to retry if a network error occurs.  Default to 1
 *
 * @return
 * FALSE, in the case of error.
 */
function gcal_create_event($event, $calendar = 'default', $account = 'default', $max_retry = 1) {
  $when = "";
  if ($event['recurrence']) {
    $when = "<gd:recurrence>" . $event['recurrence'] . "</gd:recurrence>";
  } else {
    $when = "<gd:when startTime='" . $event['start'] . "' endTime='" . $event['end'] . "'></gd:when>";
  }

  $props = "";
  if ($event['properties'] && is_array($event['properties'])) {
    foreach ($event['properties'] as $k => $v)
      $props .= "<gd:extendedProperty name=\"$k\" value=\"$v\" />";
  }

  $xml = "
    <entry xmlns='http://www.w3.org/2005/Atom'
        xmlns:gd='http://schemas.google.com/g/2005'>
      <category scheme='http://schemas.google.com/g/2005#kind'
        term='http://schemas.google.com/g/2005#event'></category>
      <title type='text'>" . $event['title'] . "</title>
      <content type='text'>" . $event['description'] . "</content>
      <gd:transparency
        value='http://schemas.google.com/g/2005#event.opaque'>
      </gd:transparency>
      <gd:eventStatus
        value='http://schemas.google.com/g/2005#event.confirmed'>
      </gd:eventStatus>
      <gd:where valueString='" . $event['where'] . "'></gd:where>
      $when
      $props
    </entry>
  ";

  $result = _gcal_action('POST', "calendar/feeds/$calendar/private/full", $xml, $account);
  if ($result['status'] == '201')
    return TRUE;

  drupal_set_message(t("Error creating this event.  Google said status: !status, !content", array(
    "!status" => $result['status'],
    "!content" => $result['content']))
  );
  return FALSE;
}

/**
 * Update an event.
 *
 * This function replaces the convenience entries in the SimpleXML object and then sends the updated XML to Google.
 *
 * @param $event
 * Event data as returned from any of the event accessor functions.
 *
 * @param $override
 * Override another user's edits with this update.  Defaults to FALSE
 *
 * @param $account
 * The account that owns this calendar.  Either an email address or an account retrieved from gcal_account
 *
 * @return
 * FALSE, in the case of error.
 */
function gcal_update_event($event, $override = FALSE, $account = 'default') {
  _gcal_event_to_entry($event);
  $xml = _gcal_event_to_xml($event);

  $headers = _gcal_ifmatch($override, $event);
  $uri = _gcal_edit_uri($event);

  $result = _gcal_action('PUT', $uri, $xml, $account, TRUE, $headers);
  if ($result['status'] != '200') {
    drupal_set_message(t("Error updating events.  Google said status: !status, !content", array(
      "!status" => $result['status'],
      "!content" => $result['content']))
    );
    return FALSE;
  }

  return TRUE;
}

/**
 * Delete an event.
 *
 * @param $event
 * As retrieved from gcal_find_events()
 *
 * @param $override
 * Override another user's edits with this update.  Defaults to FALSE
 *
 * @param $account
 * The account that owns this calendar.  Either an email address or an account retrieved from gcal_account
 *
 * @return
 * TRUE on success.
 */
function gcal_delete_event($event, $override = FALSE, $account = 'default') {
  $headers = _gcal_ifmatch($override, $event);
  $uri = _gcal_edit_uri($event);

  $result = _gcal_action('DELETE', $uri, '', $account, TRUE, $headers);
  if ($result['status'] != '200') {
    drupal_set_message(t("Error deleting events.  Google said status: !status, !content", array(
      "!status" => $result['status'],
      "!content" => $result['content']))
    );
    return FALSE;
  }

  return TRUE;
}

/**
 * Determine the appropriate If-Match header based on whether the caller wants to override another editor's edits
 *
 * @param $override
 * TRUE or FALSE
 *
 * @param $event
 *
 * @return
 * A string.
 */
function _gcal_ifmatch($override, $event) {
  $ifmatch = "*";

  if (!$override) {
    $namespaces = $event['_entry']->getNameSpaces(true);
    if (isset($namespaces['gd'])) {
      $etag = (string) $event['_entry']->attributes($namespaces['gd'])->etag;
      if ($etag)
        $ifmatch = $etag;
    }
  }

  return "If-Match: $ifmatch\r\n";
}

/**
 * Get an event's edit URI
 *
 * @param $event
 *
 * @return
 * A string.
 */
function _gcal_edit_uri($event) {
  foreach ($event['_entry']->link as $link) {
    if ($link->attributes()->rel == 'edit') {
      $uri = urldecode(preg_replace("/^https?:\/\/www\.google\.com\//", "", (string) $link->attributes()->href));
      return $uri;
    }
  }

  return "";
}

/**
 * Find events that fall within a given range.
 *
 * @param $start_min
 * RFC 3339
 *
 * @param $start_max
 * RFC 3339
 *
 * @param $calendar = 'default'
 *
 * @param $params = array()
 * Optional parameters to pass in this query (see Google API) in an array of name/value pairs
 *
 * @return
 * An array of event objects, each containing:
 *  - title
 *  - description
 *  - start
 *  - end
 */
function gcal_find_events($start_min, $start_max, $calendar = 'default', $params = array()) {
  $xml = _gcal_retrieve_events($start_min, $start_max, '', $calendar, $params);
  if (!$xml || !$xml->entry)
    return array();

  $events = array();
  foreach ($xml->entry as $entry) {
    $event = _gcal_entry_to_event($entry);
    $event['_feed'] = $xml;
    $events[] = $event;
  }

  return $events;
}

function _gcal_retrieve_events($start_min = '', $start_max = '', $id = '', $calendar = 'default', $params = array()) {
  $query  = array('start-min' => $start_min, 'start_max' => $start_max);
  $q      = _gcal_prepare_query(array_merge($query, $params));
  $result = _gcal_action('GET', "calendar/feeds/$calendar/private/full?$q");

  if ($result['status'] != '200') {
    drupal_set_message(t("Error searching for events.  Google said status: !status, !content", array(
      "!status" => $result['status'],
      "!content" => $result['content']))
    );
    return NULL;
  }

  // Google doesn't properly escape newline characters.  This destroys formatting in the 'content'
  // entity, so try to preserve that here.
  // Also, it looks like Google gives us back doubled up newlines??
  $content = str_replace("\n", 'xxxnewlinexxx', $result['content']);
  $matches = array();
  if (preg_match("/<content(.*?)>(.*?)<\/content>/", $content, $matches)) {
    $preserved = "<content" . $matches[1] . ">" . str_replace("xxxnewlinexxxxxxnewlinexxx", "&#10;", $matches[2]) . "</content>";
    $content = preg_replace("/<content.*?>.*?<\/content>/", $preserved, $content);
  }

  return simplexml_load_string(str_replace("xxxnewlinexxx", "", $content));
}

/**
 * Send a message to Google and retrieve the response.  If this operation requires an authentication
 * token, retrieve that first.
 *
 * This function also sorts out
 *
 * @param $url
 * As defined by Google for the action you want to execute
 *
 * @param $data
 * As required by the action
 *
 * @param $account
 * The account to authenticate for.  This may either be an array (as retrieved from gcal_account()) or an email address
 *
 * @return
 * An array containing 'status' and the 'content' of the response body
 */
function _gcal_action($method, $uri, $data = '', $account = 'default', $auth_required = TRUE, $headers = '') {
  $full_headers = $headers;
  if ($auth_required) {
    $token = gcal_authenticate($account);
    if (!$token) {
      drupal_set_message(t("Cannot complete this action ($uri).  Error during authentication."));
      return NULL;
    }

    $full_headers .= "Authorization: GoogleLogin auth=$token\r\n";
  }
  $full_headers .= "Content-Type: " . _gcal_content_type($uri) . "; charset=utf-8\r\n";

  $result = _gcal_message($method, $uri, $data, $full_headers);
  if ($result['status'] == '302') {
    $uri = str_replace("https://www.google.com/", "", $result['headers']['Location']);
    $result = _gcal_action($method, $uri, $data, $account, $auth_required, $headers);
  }

  return $result;
}

/**
 * Send a message to Google and return the response.
 * We're using low-level fsockopen so we have better control over headers, etc.
 * Somehow not getting this to work with the standard cURL library.
 *
 * @param $uri
 * As defined by Google for the action you want to execute
 *
 * @param $data
 * As required by the action
 *
 * @param $headers
 * A string with (optional) headers
 *
 * @param $method
 * POST, PUT or GET
 *
 * @return
 * An array containing 'status' and the 'content' of the response body
 */
function _gcal_message($method, $uri, $data = NULL, $headers = "") {
  $data = _gcal_prepare_query($data);

  if (!strpos($headers, "Content-Type"))
    $headers .= "Content-Type: application/x-www-form-urlencoded\r\n";

  $content =
    "$method /$uri HTTP/1.1\r\n" .
    "Host: www.google.com\r\n" .
    "GData-Version: 2\r\n" .
    "Content-Length: " . strlen($data) . "\r\n" .
    $headers .
    "Connection: close\r\n\r\n" .
    "$data\r\n";

//   if ($method == 'GET') {
//     drupal_set_message("<textarea cols='50' rows='150'>$content</textarea><hr />");
//   }

  return _gcal_send_message($content);
}

/**
 * Turn an array into a url encoded string.
 *
 * @param $data
 * A string or an array.  If this is a string, it is returned unmodified.
 *
 * @return
 * A string.
 */
function _gcal_prepare_query($data) {
  if (is_array($data)) {
    $a = array();
    foreach ($data as $k => $v)
      $a[] = "$k=" . urlencode($v);

    $data = join("&", $a);
  }

  return $data;
}

/**
 * Handle a transaction.
 */
function _gcal_send_message($content) {
  $errno  = 0;
  $errstr = '';
  $result = array();
  $socket = fsockopen('ssl://www.google.com', 443, $errno, $errstr);

  if (!$socket) {
    $result["status"] = $errno;
    $result["content"] = $errstr;
    return $result;
  }

  $result = array(
    'status'  => '',
    'content' => '',
    'headers' => array()
  );

  fputs($socket, $content);
  $response = array();
  while (!feof($socket)) {
    $response[] = fgets($socket, 4096);
  }
  fclose($socket);

  $code = split(" ", $response[0]);
  $result['status'] = $code[1];

  $headers_done = FALSE;
  foreach ($response as $s) {
    $line = str_replace("\r\n", "", $s);
    if (!$line) {
      $headers_done = TRUE;
      continue;
    }

    if ($headers_done) {
      $result['content'] .= $line . "\n";
    } else {
      $a = split(": ", $line);
      $result['headers'][$a[0]] = $a[1];
    }
  }

  return $result;
}

/**
 * Determine the appropriate header for this action
 *
 * @param $uri
 *
 * @return
 * A Content-Type string
 */
function _gcal_content_type($uri) {
  if ($uri == 'accounts/ClientLogin')
    return "application/x-www-form-urlencoded";

  return "application/atom+xml";
}

/**
 * Determine whether this action requires an authentication token.
 *
 * @param $uri
 *
 * @return
 * TRUE or FALSE
 */
function _gcal_requires_login($uri) {
  if ($uri == 'accounts/ClientLogin')
    return FALSE;

  return TRUE;
}

/**
 * Create a GCal event data structure from an XML 'entry' element.
 *
 * The data structure contains entries for the standard event type things you'd want to interact with,
 * as well as the original SimpleXML object which the values were taken from.
 *
 * To save the event, you must alter the entries when they exist in the data structure, not in the SimpleXML object.  The
 * values in the data structure will overwrite those in the SimpleXML object when the event is saved.
 *
 * @param $entry
 * A SimpleXML 'entry' element.
 *
 * @return
 * A data structure containing the following entries:
 *  - title
 *  - description
 *  - start
 *  - end
 */
function _gcal_entry_to_event($entry) {
  $event = array(
    'title'       => (string) $entry->title,
    'description' => (string) $entry->content
  );

  $namespaces = $entry->getNameSpaces(true);
  $gd = $entry->children($namespaces['gd']);

  $event['start']   = (string) $gd->when->attributes()->startTime;
  $event['end']     = (string) $gd->when->attributes()->endTime;

  if ($gd->extendedProperty) {
    $event['properties'] = array();
    foreach ($gd->extendedProperty as $prop) {
      $event['properties'][$prop->attributes()->name] = $prop->attributes()->value;
    }
  }

  $event['_entry']  = $entry;
  return $event;
}

/**
 * Update the SimpleXML object with data from the event.
 *
 * @param $event
 * An event data structure, as obtained from _gcal_entry_to_event
 */
function _gcal_event_to_entry(&$event) {
  $namespaces = $event['_entry']->getNameSpaces(true);

  $event['_entry']->title = $event['title'];
  $event['_entry']->description = $event['description'];

  $event['_entry']->children($namespaces['gd'])->when->attributes()->startTime = $event['start'];
  $event['_entry']->children($namespaces['gd'])->when->attributes()->endTime = $event['end'];
}

/**
 * Get a full XML document from an event object by replacing all 'entry' elements with the one event.
 *
 * @param $event
 */
function _gcal_event_to_xml($event) {
  $namespaces = _gcal_namespaces_string($event['_entry']);
  $xml = str_replace("<entry", "<entry $namespaces", $event['_entry']->asXML());
  return "<?xml version='1.0' encoding='UTF-8'?>" . $xml;
}

/**
 * Create a GCal calendar data structure from an XML 'entry' element.
 *
 * The data structure contains entries for the standard event type things you'd want to interact with,
 * as well as the original SimpleXML object which the values were taken from.
 *
 * To save the calendar, you must alter the entries when they exist in the data structure, not in the SimpleXML object.  The
 * values in the data structure will overwrite those in the SimpleXML object when the event is saved.
 *
 * @param $entry
 * A SimpleXML 'entry' element.
 *
 * @return
 * A data structure containing the following entries:
 *  - title
 *  - description
 */
function _gcal_entry_to_calendar($entry) {
  $calendar = array(
    'title'       => (string) $entry->title,
    'description' => (string) $entry->summary
  );

  $calendar['_entry'] = $entry;
  return $calendar;
}

/**
 * Reconstruct namespace declarations from SimpleXML object.
 *
 * @param $entity
 * A SimpleXML entity
 *
 * @return
 * A string of namespace declarations.
 */
function _gcal_namespaces_string($entity) {
  $namespaces = $entity->getNameSpaces(true);

  $a = array();
  foreach ($namespaces as $ns => $uri) {
    $ext = ($ns)? ":$ns" : "";
    $a[] = "xmlns$ext=\"$uri\"";
  }

  return join(" ", $a);
}

